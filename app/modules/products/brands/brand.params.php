<?php


class nv_products_brands_brand_params extends nv_products_brands_brand
{

    /** @var \App\Products\Brands\Param $bparam */
    private $bparam;

    function config_custom()
    {
        /*$pdf_file = new \Novut\Tools\Files\S3;
        $pdf_file->setBucket();
        $pdf_file->setAsPublic();
        $pdf_file->setFileContent(file_get_contents($_FILES['InvoicePDF']['tmp_name']));
        $pdf_file->setFileName("web/orders/".$xml_data['Comprobante']['Complemento']['TimbreFiscalDigital']['UUID'].".pdf");
        $pdf_url = $pdf_file->push();*/

        parent::config_custom(); // TODO: Change the autogenerated stub

        $this->FormID .= "Params";

    }


    function getBParamInfo($BParamID = null)
    {
        if (!$this->brand)
        {
            $this->getBrandInfo();
        }


        $this->bparam = new \App\Products\Brands\Param($this->brand, $BParamID ? : $this->input['BParamID']);

        if (!$this->bparam->getBParamID())
        {
            BN_Responses::alert_error('El par&aacute;metro no existe.');
        }
    }

    function cmd_params()
    {


        $view_data = [];
        $js = [];


        $table = new \Novut\Tools\Tables\Table($this->FormID);
//        $table = new novut\ui\table($this->FormID);
        $table->addField('BParamCode', 'ID', '10%');
        $table->addField('BParamName', 'Nombre', '55%');
        $table->addField('BParamComment', 'Comentario', '30%');
        $table->addField('BParamType', 'Tipo', '5%');

        foreach (\App\Products\Brands\Params::list($this->brand) as $data)
        {
            $data = $data->export();

            $data['BParamCode'] = "<a href=\"#\" onclick=\"".BN_JSHelpers::CMDRoute('', ['cmd' => 'params_edit', 'BrandID' => $data['BrandID'], 'BParamID' => $data['BParamID']])."; return false;\">{$data['BParamCode']}</a>";
            $data['BParamType'] = \App\Products\Brands\Params::getTypes()[$data['BParamType']];
            //$data['Action'] = $table->context_menu()->placeholder($data['BParamID']);
            $table->addRow($data);
        }

        //$table->context_menu()->add_menu("Editar", 'brand_param_edit');
        //$table->context_menu()->add_menu("Eliminar", 'brand_param_delete');
        $view_data['table'] = $table->getTable();


        $this->layout->selectTab('params');
        $this->layout->setWebLib('codemirror');
        $this->layout->render($this->views->load_render('brand/params/index', $this->view_data_presets($view_data)) ,"Par&aacute;metros",$js);

    }

    function cmd_params_new()
    {
        $this->FormID .= "New";
        $js = [];
        $view_data = [];

        $js[] = BN_Forms::setValueText('BrandID', $this->brand->getBrandID(), $this->FormID);
        $js[] = BN_Forms::setValueHtml('BParamType', BN_Forms::option_list_render(\App\Products\Brands\Params::getTypes()), $this->FormID);
        $js[] = BN_Forms::setSelect2('BParamType', $this->FormID);
        $js[] = "load_codemirror();";

        $view_data['cmd'] = "params_new_add";
        $this->response->modal($this->views->load_render('brand/params/form', $this->view_data_presets($view_data)), 'Agregar Par&aacute;metro', $js)->setWidth(900)->render();
    }

    function cmd_params_new_add()
    {
        $this->FormID .= "New";

        $validation = BN_Forms::validation($this->FormID, $this->input);
        $validation->setRequiredField('BParamName');
        $validation->setRequiredField('BParamCode');
        $validation->setRequiredField('BParamType');

        $validation->fieldValidation('BParamName', $this->input['BParamName'], function ($name)
        {
            return \App\Products\Brands\Params::name_exist($this->brand, trim($name)) ? false : true;
        }, "El nombre ya existe");

        $validation->fieldValidation('BParamCode', $this->input['BParamCode'], function ($code)
        {
            return \App\Products\Brands\Params::code_exist($this->brand, trim($code)) ? false : true;
        }, "El alias ya existe");

        // json validation
        if ($this->data_input_decode() && !$this->input['data-confirm'] && BN_Coders::json_validation($this->data_input_decode()) === false)
        {
            $this->response->confirm_simple("<div>El contenido de Data es inv&aacute;lido.</div><div>&iquest;Deseas Continuar?</div>", 'data-confirm');
        }
        // validate
        else if ($this->data_input_decode() && !$this->input['data-validation'] && !$this->data_input_validation())
        {
            $this->response->confirm_simple("<div>El json de Data es inv&aacute;lido. Cada elemento debe tener el atributo \"id\" y \"name\"</div><div>&iquest;Deseas Continuar?</div>", 'data-confirm');
        }


        $validation->validate();

        $param = new \App\Products\Brands\Param($this->brand);
        $param->setBParamName($this->input['BParamName']);
        $param->setBParamCode($this->input['BParamCode']);
        $param->setBParamType($this->input['BParamType']);
        $param->setBParamComment($this->input['BParamComment']);

        if (BN_Coders::json_validation($this->data_input_decode()) === true)
        {
            $param->setBParamData(BN_Coders::json_encode(BN_Coders::json_decode($this->data_input_decode())));
        }

        $param->add();

        $this->response->notification_success('Registro Agregado', 'reload')->render();

    }

    function cmd_params_edit()
    {
        $this->FormID .= "Edit";
        $this->getBParamInfo();

        $js = [];
        $view_data = [];

        $js[] = BN_Forms::setValueText('BrandID', $this->brand->getBrandID(), $this->FormID);
        $js[] = BN_Forms::setValueText('BParamID', $this->bparam->getBParamID(), $this->FormID);

        $js[] = BN_Forms::setValueText('BParamName', $this->bparam->getBParamName(), $this->FormID);
        $js[] = BN_Forms::setValueText('BParamCode', $this->bparam->getBParamCode(), $this->FormID);
        $js[] = BN_Forms::setValueHtml('BParamData', \BN_Coders::json_encode(\BN_Coders::json_decode($this->bparam->getBParamData()), true), $this->FormID);
        $js[] = BN_Forms::setValueText('BParamComment', $this->bparam->getBParamComment(), $this->FormID);

        $js[] = BN_Forms::setValueHtml('BParamType', BN_Forms::option_list_render(\App\Products\Brands\Params::getTypes()), $this->FormID);
        $js[] = BN_Forms::setValueSelect('BParamType', $this->bparam->getBParamType(), $this->FormID);
        $js[] = BN_Forms::setSelect2('BParamType', $this->FormID);


        $js[] = "load_codemirror();";

        $view_data['cmd'] = "params_edit_save";
        $view_data['BParamID'] = $this->bparam->getBParamID();

        $this->response->modal($this->views->load_render('brand/params/form', $this->view_data_presets($view_data)), 'Editar Par&aacute;metro', $js)->setWidth(900)->render();
    }



    function cmd_params_edit_save()
    {
        $this->FormID .= "Edit";
        $this->getBParamInfo();

        $validation = BN_Forms::validation($this->FormID, $this->input);
        $validation->setRequiredField('BParamName');
        $validation->setRequiredField('BParamCode');
        $validation->setRequiredField('BParamType');

        $validation->fieldValidation('BParamName',  $this->input['BParamName'],function ($name)
        {
            return \App\Products\Brands\Params::name_exist($this->brand, trim($name), $this->bparam->getBParamID()) ? false : true;
        }, "El nombre ya existe");

        $validation->fieldValidation('BParamCode',  $this->input['BParamCode'],function ($code)
        {
            return \App\Products\Brands\Params::code_exist($this->brand, trim($code), $this->bparam->getBParamID()) ? false : true;
        }, "El alias ya existe");

        // json validation
        if ($this->data_input_decode() && !$this->input['data-confirm'] && BN_Coders::json_validation($this->data_input_decode()) === false)
        {
            $this->response->confirm_simple("<div>El contenido de Data es inv&aacute;lido.</div><div>&iquest;Deseas Continuar?</div>", 'data-confirm');
        }


        $validation->validate();

        $param = new \App\Products\Brands\Param($this->brand, $this->bparam->getBParamID());
        $param->setBParamName($this->input['BParamName']);
        $param->setBParamCode($this->input['BParamCode']);
        $param->setBParamType($this->input['BParamType']);
        $param->setBParamComment($this->input['BParamComment']);

        if (BN_Coders::json_validation($this->data_input_decode()) === true)
        {
            $param->setBParamData(BN_Coders::json_encode(BN_Coders::json_decode($this->data_input_decode())));
        }
        else
        {
            $param->setBParamData('');
        }

        $param->save();

        $this->response->notification_success('Cambios Aplicados', 'reload')->render();

    }

    function cmd_params_delete()
    {
        $this->getBParamInfo();

        if (!$this->input['confirm'])
        {
            $this->response->confirm_simple("&iquest;Deseas eliminar este registro?", 'confirm');
        }

        $param = new \App\Products\Brands\Param($this->brand, $this->bparam->getBParamID());
        $param->cancel();

        $this->response->notification_success('Cambios Aplicados', 'reload')->render();

    }

    private function data_input_decode()
    {
        return trim(base64_decode($this->input['BParamData']));
    }

    private function data_input_validation()
    {
        $data = \BN_Coders::json_decode($this->data_input_decode());

        foreach ($data as $line_data)
        {
            if (isset($line_data['id']) && isset($line_data['name']))
            {
                return true;
            }
        }

        return false;
    }


}
